// „Çπ„ÉÜ„Éº„Ç∏„ÇØ„É™„Ç¢Â†±ÈÖ¨„Ç∑„Çπ„ÉÜ„É†
class StageRewardSystem {
    constructor() {
        this.playerBuffs = {
            maxHp: 0,           // ÊúÄÂ§ßHPÂ¢óÂä†Èáè
            attackPower: 1.0,   // ÊîªÊíÉÂäõÂÄçÁéá
            fireRate: 1.0,      // ÈÄ£Â∞ÑÈÄüÂ∫¶ÂÄçÁéá
            moveSpeed: 1.0,     // ÁßªÂãïÈÄüÂ∫¶ÂÄçÁéá
            itemRange: 1.0      // „Ç¢„Ç§„ÉÜ„É†Âê∏ÂºïÁØÑÂõ≤ÂÄçÁéá
        };

        this.rewardOptions = [
            {
                id: 'maxHp',
                name: 'ÊúÄÂ§ßHP +20',
                icon: '‚ù§Ô∏è',
                description: 'ÊúÄÂ§ßHP„Åå20Â¢óÂä†„Åó„Åæ„Åô',
                apply: () => {
                    this.playerBuffs.maxHp += 20;
                }
            },
            {
                id: 'attackPower',
                name: 'ÊîªÊíÉÂäõ +15%',
                icon: '‚öîÔ∏è',
                description: 'ÊîªÊíÉÂäõ„Åå15%Â¢óÂä†„Åó„Åæ„Åô',
                apply: () => {
                    this.playerBuffs.attackPower *= 1.15;
                }
            },
            {
                id: 'fireRate',
                name: 'ÈÄ£Â∞ÑÈÄüÂ∫¶ +20%',
                icon: 'üî•',
                description: 'ÈÄ£Â∞ÑÈÄüÂ∫¶„Åå20%Âêë‰∏ä„Åó„Åæ„Åô',
                apply: () => {
                    this.playerBuffs.fireRate *= 1.2;
                }
            },
            {
                id: 'moveSpeed',
                name: 'ÁßªÂãïÈÄüÂ∫¶ +10%',
                icon: '‚ö°',
                description: 'ÁßªÂãïÈÄüÂ∫¶„Åå10%Â¢óÂä†„Åó„Åæ„Åô',
                apply: () => {
                    this.playerBuffs.moveSpeed *= 1.1;
                }
            },
            {
                id: 'itemRange',
                name: '„Ç¢„Ç§„ÉÜ„É†Âê∏ÂºïÁØÑÂõ≤ +30%',
                icon: 'üß≤',
                description: '„Ç¢„Ç§„ÉÜ„É†„ÅÆÂê∏ÂºïÁØÑÂõ≤„Åå30%Êã°Â§ß„Åó„Åæ„Åô',
                apply: () => {
                    this.playerBuffs.itemRange *= 1.3;
                }
            }
        ];
    }

    // „É©„É≥„ÉÄ„É†„Å´3„Å§„ÅÆÂ†±ÈÖ¨„ÇíÈÅ∏Êäû
    getRandomRewards() {
        const shuffled = [...this.rewardOptions].sort(() => Math.random() - 0.5);
        return shuffled.slice(0, 3);
    }

    // Â†±ÈÖ¨„ÇíÈÅ©Áî®
    applyReward(rewardId) {
        const reward = this.rewardOptions.find(r => r.id === rewardId);
        if (reward) {
            reward.apply();
            return true;
        }
        return false;
    }

    // ÁèæÂú®„ÅÆ„Éê„ÉïÁä∂ÊÖã„ÇíÂèñÂæó
    getBuffs() {
        return { ...this.playerBuffs };
    }

    // „Éê„Éï„Çí„É™„Çª„ÉÉ„Éà
    resetBuffs() {
        this.playerBuffs = {
            maxHp: 0,
            attackPower: 1.0,
            fireRate: 1.0,
            moveSpeed: 1.0,
            itemRange: 1.0
        };
    }

    // HTML„É¢„Éº„ÉÄ„É´„ÇíË°®Á§∫
    showRewardModal(onRewardSelected) {
        const modal = document.getElementById('rewardModal');
        const grid = document.getElementById('rewardGrid');
        grid.innerHTML = '';

        const rewards = this.getRandomRewards();

        rewards.forEach(reward => {
            const card = document.createElement('div');
            card.className = 'reward-card';
            card.onclick = () => {
                this.applyReward(reward.id);
                modal.style.display = 'none';
                if (onRewardSelected) {
                    onRewardSelected(reward);
                }
            };

            card.innerHTML = `
                <div class="reward-icon">${reward.icon}</div>
                <div class="reward-name">${reward.name}</div>
                <div class="reward-description">${reward.description}</div>
            `;

            grid.appendChild(card);
        });

        modal.style.display = 'flex';
    }

    // „É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
    closeRewardModal() {
        document.getElementById('rewardModal').style.display = 'none';
    }
}
